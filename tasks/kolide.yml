---

- name: Install kolide packages
  package: name={{ item }} state=present
  with_items: "{{ kolide_pkgs }}"

- name: ensure mysqld is enabled and started
  service:
    name: "{{ mysql_svc | default('mysqld') }}"
    state: started
    enabled: yes

- name: Create kolide mysql database
  mysql_db:
    name: "{{ kolide_mysql_db }}"
    state: present
    login_user: "{{ kolide_mysql_root_user }}"
    login_password: "{{ kolide_mysql_root_pass }}"

- name: Create kolide mysql user
  mysql_user:
    name: "{{ kolide_mysql_user }}"
    password: "{{ kolide_mysql_pass }}"
    priv: "{{ kolide_mysql_db }}.*:ALL"
    state: present
    login_user: "{{ kolide_mysql_root_user }}"
    login_password: "{{ kolide_mysql_root_pass }}"

- name: add kolide unix group
  group:
    name: "{{ kolide_group }}"
    state: present

- name: add kolide unix user
  user:
    name: "{{ kolide_user }}"
    group: "{{ kolide_group }}"
    uid: "{{ kolide_uid }}"
    system: "{{ kolide_system_user | default(no) }}"
    shell: /bin/false
    home: "{{ kolide_homedir }}"

- name: ensure directories exist
  file:
    dest: "{{ item }}"
    state: directory
    owner: "{{ kolide_user }}"
    group: "{{ kolide_group }}"
    mode: '0755'
  with_items:
    - /etc/kolide
    - "{{ kolide_logdir }}"

#- include: secret.yml
#- set_fact:
#    api_secret: "{{ rand.stdout }}"

- block:
    - include: certificate-selfsigned.yml
    - set_fact:
        kolide_certificate_key: "{{ ssl_privatedir }}/{{ ansible_fqdn }}.key"
        kolide_certificate_cert: "{{ ssl_dir }}/{{ ansible_fqdn }}.crt"
  when: kolide_certificate_cert == ''

- name: configure kolide
  template:
    src: kolide.yml.j2
    dest: "/etc/kolide/kolide.yml"
    mode: '0644'
    backup: yes
    #validate: 'ruby -e "require \'yaml\'; YAML.load_file(\'%s\')"'

## FIXME/centos7! FAILED! => {"changed": true, "cmd": ["/usr/bin/kolide", "prepare", "db", "--config", "/etc/kolide/kolide.yml"], "delta": "0:00:00.036057", "end": "2017-01-01 12:12:07.384928", "failed": true, "rc": 1, "start": "2017-01-01 12:12:07.348871", "stderr": "2017/01/01 12:12:07 FAIL 20161118212436_CreateTableDistributedQueryCampaigns.go (Error 1293: Incorrect table definition; there can be only one TIMESTAMP column with CURRENT_TIMESTAMP in DEFAULT or ON UPDATE clause), quitting migration.", "stdout": "Using config file:  /etc/kolide/kolide.yml", "stdout_lines": ["Using config file:  /etc/kolide/kolide.yml"], "warnings": []}
- name: check db prepare marker
  stat: path=/etc/kolide/.preparedb
  register: db
- block:
    - name: prepare kolide db
      command: /usr/bin/fleet prepare db --config /etc/kolide/kolide.yml
    - name: add db prepare marker
      file: dest=/etc/kolide/.preparedb state=touch
  when: not db.stat.exists


- include: kolide-license.yml
  when: kolide_license_file != ''

## also have users and org to fill...
## INSERT INTO `app_configs` VALUES (1,'OrgName','','https://kolidefqdn:9080',0,'','',587,0,1,0,'','','',1,1,'xxxxxx');
## INSERT INTO `users` VALUES (1,'2017-01-01 12:12:14','2017-01-01 12:12:14',NULL,0,'<username>','xxxxx','xxxxxx','','<useremail>',1,1,0,'','');

- block:
    - name: install kolide systemd configuration
      template:
        src: "systemd-{{ item }}.service.j2"
        dest: "/lib/systemd/system/{{ item }}.service"
        mode: '0644'
        backup: yes
      with_items:
        - kolide
      register: systemdconf
      ignore_errors: true
    - block:
        - include: "immutable.yml target_dir=/lib/systemd/system state=pre"
        - name: install kolide systemd configuration
          template:
            src: "systemd-{{ item }}.service.j2"
            dest: "/lib/systemd/system/{{ item }}.service"
            mode: '0644'
            backup: yes
          with_items:
            - kolide
        - include: "immutable.yml target_dir=/lib/systemd/system state=post"
      when: systemdconf|failed
    - block:
        - name: enable and start kolide systemd services
          service:
            name: "{{ item }}"
            enabled: yes
            state: 'started'
          ignore_errors: true
          with_items:
            - kolide
      when: kolide_service_enabled
    - block:
        - name: disable and stop kolide systemd service
          service:
            name: "{{ item }}"
            enabled: no
            state: 'stopped'
          ignore_errors: true
          with_items:
            - kolide
      when: not kolide_service_enabled
  when: ansible_service_mgr == 'systemd'

